{
	"owner_org": "d8a6202b-c0c3-463d-88a0-3bc021a178ed",
	"maintainer": "John Stutz",
	"relationships_as_object": [],
	"private": false,
	"maintainer_email": "john.c.stutz@nasa.gov",
	"num_tags": 3,
	"id": "28af16a0-a0fa-403c-ae97-25afe4491975",
	"metadata_created": "2016-02-26T21:45:33.557100",
	"metadata_modified": "2016-05-06T08:18:34.384149",
	"author": null,
	"author_email": null,
	"state": "active",
	"version": null,
	"license_id": "us-pd",
	"type": "dataset",
	"resources": [],
	"num_resources": 0,
	"tags": [{
		"vocabulary_id": null,
		"display_name": "ames",
		"name": "ames",
		"revision_timestamp": "2016-02-26T21:45:33.557100",
		"state": "active",
		"id": "26409e70-decd-4cc6-9beb-904602430852"
	},
	{
		"vocabulary_id": null,
		"display_name": "dashlink",
		"name": "dashlink",
		"revision_timestamp": "2016-02-26T21:45:33.557100",
		"state": "active",
		"id": "4377f23e-7f40-493e-82fd-834ccb75e9ba"
	},
	{
		"vocabulary_id": null,
		"display_name": "nasa",
		"name": "nasa",
		"revision_timestamp": "2016-02-26T21:45:33.557100",
		"state": "active",
		"id": "34817959-c506-4bfe-b8fd-330f550970e4"
	}],
	"title": "Efficient Matlab Programs",
	"tracking_summary": {
		"total": 7,
		"recent": 1
	},
	"groups": [],
	"relationships_as_subject": [],
	"revision_timestamp": "2016-02-26T21:45:33.557100",
	"name": "efficient-matlab-programs",
	"isopen": true,
	"url": null,
	"notes": "Matlab has a reputation for running slowly.  Here are some pointers on how to speed computations, to an often unexpected degree.  Subjects currently covered:rnrn rnrnMatrix CodingrnrnImplicit Multithreading on a Multicore MachinernrnSparse MatricesrnrnSub-Block Computation to Avoid Memory Overflowrnrn --------------------------------------------------------------------------------------------------------rnrn rnrnMatrix Coding - 1rnrn rnrn Matlab documentation notes that efficient computation depends on using the matrix facilities, and that mathematically identical algorithms can have very different runtimes, but they are a bit coy about just what these differences are.  A simple but telling example:rnrn rnrn The following is the core of the GD-CLS algorithm of Berry et.al., copied from fig. 1 of Shahnaz et.al, 2006, "Document clustering using nonnegative matrix factorization':rnrn         for jj = 1:maxiterrn             A = W'*W + lambda*eye(k);rn             for ii = 1:nrn                 b = W'*V(:,ii);rn                 H(:,ii) = A \ b;rn             endrn             H = H .* (H>0);rn             W = W .* (V*H') ./ (W*(H*H') + 1e-9);rn         endrnrn rnrnReplacing the columwise update of H with a matrix update gives:rnrn          for jj = 1:maxiterrn              A = W'*W + lambda*eye(k);rn              B = W'*V;rn              H = A \ B;rn              H = H .* (H>0);rn              W = W .* (V*H') ./ (W*(H*H') + 1e-9);rn          endrnrn rnrnThese were tested on an 8049 x 8660 sparse matrix bag of words V (.0083 non-zeros), with W of size 8049 x 50, H 50 x 8660, maxiter = 50, lambda = 0.1, and identical initial W.   They were run consecutivly, multithreaded on an 8-processor Sun server, starting at ~7:30PM.  Tic-toc timing was recorded. rnrn rnrnRuntimes were respectivly  6586.2 and 70.5 seconds, a 93:1 difference.  The maximum absolute pairwise difference between W matrix values was 6.6e-14.  rnrn rnrnSimilar speedups have been consistantly observed in other cases.  In one algorithm, combining matrix operations with efficient use of the sparse matrix facilities gave a 3600:1 speedup. rnrn rnrnFor speed alone, C-style iterative programming should be avoided wherever possible.  In addition,  when a couple lines of matrix code can substitute for an entire C-style function, program clarity is much improved. rnrn----------------------------------------------------------------------------------------------------------------------rnrn Matrix Coding - 2rnrn rnrnApplied to integration, the speed gains are not so great,  largely due to the time taken to set up the and deal with the boundaries.  The anyomous function setup time is neglegable.  I demonstrate on a simple uniform step linearly interpolated 1-D integration of cos() from 0 to pi, which should yield zero:rn          tic;rn          step = .00001;rn          fun = @cos;rn          start = 0;rn          endit = pi;rn          enda = floor((endit - start)/step)*step + start;rn          delta = (endit - enda)/step;rn          intF = fun(start)/2;rn          intF = intF + fun(endit)*delta/2;rn          intF = intF + fun(enda)*(delta+1)/2;rn          for ii = start+step:step:enda-steprn             intF = intF + fun(ii);rn          endrn          intF = intF*steprn          toc;rnrnintF =   -2.910164109692914e-14rnElapsed time is 4.091038 seconds.rnrn rnrnReplacing the inner summation loop with the matrix equivalent speeds things up a bit:rnrn          tic;rn          step = .00001;rn          fun = @cos;rn          start = 0;rn          endit = pi;rn          enda = floor((endit - start)/step)*step + start;rn          delta = (endit - enda)/step;rn          intF = fun(start)/2;rn          intF = intF + fun(endit)*delta/2;rn          intF = intF + fun(enda)*(delta+1)/2;rn          intF = intF + sum(fun(start+step:step:enda-step));rn          intF = intF*steprn          toc;rnintF =   -2.868419946011613e-14rnElapsed time is 0.141564 seconds.rnrn rnrnThe core computation takes about 70% of the full time used above, but without the boundary handling gives a potentially significant error:rnrn        tic; sum(fun(start:step:endit))*step,  toc;rnans =    2.653589763815900e-06rnElapsed time is 0.099088 seconds. ---------------------------------------------------------------------------------------------------------------------- rnrnImplicit Multithreading on a Multicore Machinernrn rnrnSelect File > Preferences > General > Multithreading. and enable multithreading.   Enjoy.rnrn rnrn See  Multiprocessing in MATLAB on the help system for documentation.rnrn-----------------------------------------------------------------------------------------------------------------------rnrn Sparse Matrices rnrn rnrnIn Matlab, the sparse matrix facilities are activated by simply making a matrix sparse,as in  Xs = sparse(X), and using it.  Most of the matrix operations are able to make effecient use of truely sparse matrices, with considerable relief of memory demands.  A simple example follows: rnrn rnrn load ... /home/stutz/DaSH/IDU/ASAP/Runs-20080303_gdcls/gdcls_dataset.matrnrnX = Data0.X_T;       % a terms*docs bag of word countsrnnnz(X) / numel(X)rn% ans = 0.0044rnrnC = Data0.Cats;      % a 0/1 valued non-exclusive category matrixrnnnz(C) / numel(C)rn% ans =  0.0329rnrnThe memory saved by using sparse matrices is not trivial:rnrnXf = full(X);rnCf = full(C);rnCt = C';rnCtf = Cf';rnXt = X';rnXtf = Xf';rnrnwhos X Xt Xf Xtf C Ct Cf Ctfrnrn%   Name          Size                    Bytes  Class     Attributesrn%rn%   C         11245x33                   195536  double  sparse rnrn%   Cf        11245x33                2968680  double              rn%   Ct        33x11245                   285232  double  sparse   rn%   Ctf       33x11245                2968680  double              rn%   X      4686x11245             11649776  double  sparse rn%   Xf   14686x11245        1321152560  double              rn%   Xt   11245x14686            11677304  double  sparse rn%   Xtf  11245x14686       1321152560  double  rnrn rnrnThe disparity between C and Ct byte counts are due  to the assymetry.  Matlab's sparse representation requires a column index for non-empty columns plus a row index for each non-zero element. rnrnrnThe matrix multiplication timings vary significantly, but not quite as one might expect, due to the great disparity in matrix sizes:rnrntic;  X*C;  toc;     % sparse*sparsern%  Elapsed time is 0.100225, 0.108354, 0.115247, 0.102686 seconds.rnrntic;  Ct*Xt;  toc;   % sparse*sparsern%  Elapsed time is 0.153515, 0.146475, 0.145449, 0.156352  seconds.rnrntic; Ctf*Xt; toc;    % full*sparsern%  Elapsed  0.404232, 0.421417, 0.424837, 0.404256rnrntic;  X*Cf; toc;     % sparse*fullrn%  Elapsed 0.762932, 1.148991, 0.727793, 0.717451rnrntic; Ctf*Xtf; toc;   % full*fullrn%  Elapsed 2.984380, 3.164782, 3.050478, 3.253079rnrntic; Xf*Cf; toc;     % full*fullrn%  Elapsed 3.423657, 3.503390, 3.854899, 3.555406rnrntic; Xf*C;  toc;     % full*sparsern%  Elapsed 7.204459, 7.193888, 8.999477, 9.477529rnrntic;  Ct*Xtf;  toc;  % sparse*fullrn%  Elapsed 9.655192, 7.155294, 7.155073, 7.496134rnrnThe above was monitored with UNIX top, while running basic Matlab in multithreading mode on an 8-processor server.  These calculations involved up to 16% of CPU, say 1.3 processors, but typically 12.5% or 1 processor, dropping to under 0.04% when idle.rnrnMatrix normalization time differences are even greater, depite the advantage of multithreading  The sparse matrix normalizations below ran with no more than 12.5% CPU.  The following full matrix calculations quickly ramped up and held at 90-91.8% of CPU, say 7.3 processors, with only one significant (>0.2% CPU) competing process present.rnrn rnrntic;  X / spdiags(sum( X.^2)', 0, 11245, 11245); toc;rnrn% sparse/sparse(sparse)rn% Elapsed32.781410, 30.889889, 30.978490, 32.140246,rnrnic;  X / diag(sum(X.^2)); toc;             % sparse/full(sparse)rn%  Elapsed 30.714821, 30.973805, 30.398733, 30.443698,rnrntic; Xf / diag(sum(Xf.^2)); toc;                      % full/full(full)rnrnKilled Matlab (not responding) after 22 hours weekend clock time.rnrntic; Xf / spdiags(sum(Xf.^2)', 0, 11245, 11245); toc; %full/sparse(full)rnrnKilled Matlab (not responding) after 42 hours weekend clock time.rn-----------------------------------------------------------------------------------------------------------------------rnrn rnrnSub-Block Computation to Avoid Memory Overflow rnrn rnrnThe downside of matrix  computation is that intermediate values may be so large that the total memory allocation exceeds what is available. Using sparse matrices helps avoid this, but not all of our matrices are sparse.  If a calculation can be done on a column by colume basis, or line by line, or page by page..., we can usually break it into blocks of computable size while retaining most of speed advantage of matrix calculation.  Consider the following schematic:rnrnrnfunction [...] = whatever(.....)rntryrn    <the basic matrix calculation>rn    return;  % straight matrix resultrnrncatchrn    <set a large initial blocksize>rn    tryrn        <set up accumulator(s)>rn        while blocksize >= 1rn            tryrn                <zero accumulator(s)>rn                <set up sub-blocks and bookkeeping>rn                for <loop over sub-blocks>rn                    <do calculation on a sub-block)rn                    <add result to accumulator>rn                endrn              return  % accumulated resultrn          catchrn              blocksize = floor(blocksize / 2);rn          end % inner tryrn      end % whilern      error('unable to complete whatever at blocksize == 1');rn    catch % middle tryrn        error('unable to allocate accumulator(s)');rn    end % middle tryrnend % outer tryrn rnrnThe initially tried matrix calculation both lets us deal effeciently with small matrices and provides good documentation for what we do in the more complex blocked calculation.  The intermediate try allows a graceful exit when we cannot even build an accumulator, and is probably not needed when our result is of smaller dimension than the inputs.  The inner try/while quickly runs our blocksize down to something that that works, so long as the initial block processed is one of the largest. rnrn -------------------------------------------------------------------------------------------",
	"license_title": "U.S. Government Work",
	"extras": [{
		"key": "harvest_source_id",
		"value": "39e4ad2a-47ca-4507-8258-852babd0fd99"
	},
	{
		"key": "issued",
		"value": "2010-09-09T16:27:10"
	},
	{
		"key": "resource-type",
		"value": "Dataset"
	},
	{
		"key": "source_hash",
		"value": "739ef823f3e8cf3d0963740e806d84ed4c39c4b9"
	},
	{
		"key": "accessLevel",
		"value": "public"
	},
	{
		"key": "catalog_conformsTo",
		"value": "https://project-open-data.cio.gov/v1.1/schema"
	},
	{
		"key": "catalog_@context",
		"value": "https://project-open-data.cio.gov/v1.1/schema/catalog.jsonld"
	},
	{
		"key": "catalog_describedBy",
		"value": "https://project-open-data.cio.gov/v1.1/schema/catalog.json"
	},
	{
		"key": "harvest_source_title",
		"value": "NASA Data.json"
	},
	{
		"key": "source_schema_version",
		"value": "1.1"
	},
	{
		"key": "programCode",
		"value": ["026:029"]
	},
	{
		"key": "bureauCode",
		"value": ["026:00"]
	},
	{
		"key": "landingPage",
		"value": "https://c3.nasa.gov/dashlink/resources/9/"
	},
	{
		"key": "harvest_object_id",
		"value": "f578cd99-3199-47da-aaf5-c8359f48a6e8"
	},
	{
		"key": "publisher",
		"value": "Dashlink"
	},
	{
		"key": "_id",
		"value": {
			"$oid": "56cf5b00a759fdadc44e55cd"
		}
	},
	{
		"key": "license",
		"value": "http://www.usa.gov/publicdomain/label/1.0/"
	},
	{
		"key": "language",
		"value": ["en-US"]
	},
	{
		"key": "publisher_hierarchy",
		"value": "U.S. Government > National Aeronautics and Space Administration > Dashlink"
	},
	{
		"key": "modified",
		"value": "2010-09-29T15:18:32"
	},
	{
		"key": "source_datajson_identifier",
		"value": true
	},
	{
		"key": "accrualPeriodicity",
		"value": "irregular"
	},
	{
		"key": "identifier",
		"value": "DASHLINK_9"
	},
	{
		"state": "active",
		"key": "harvest_object_id",
		"value": "f578cd99-3199-47da-aaf5-c8359f48a6e8"
	},
	{
		"state": "active",
		"key": "harvest_source_id",
		"value": "39e4ad2a-47ca-4507-8258-852babd0fd99"
	},
	{
		"state": "active",
		"key": "harvest_source_title",
		"value": "NASA Data.json"
	}],
	"license_url": "http://www.usa.gov/publicdomain/label/1.0/",
	"organization": {
		"description": "NASA's vision: To reach for new heights and reveal the unknown so that what we do and learn will benefit all humankind.rnrnTo do that, thousands of people have been working around the world -- and off of it -- for 50 years, trying to answer some basic questions. What's out there in space? How do we get there? What will we find? What can we learn there, or learn just by trying to get there, that will make life better here on Earth?rnrnNASA conducts its work in four principal organizations, called mission directorates:rn rnAeronautics: works to solve the challenges that still exist in our nation's air transportation system: air traffic congestion, safety and environmental impacts.rnrnHuman Exploration and Operations: focuses on International Space Station operations, development of commercial spaceflight opportunities and human exploration beyond low Earth orbit.rnrnScience: explores the Earth, solar system and universe beyond; charts the best route of discovery; and reaps the benefits of Earth and space exploration for society.rnrnSpace Technology: rapidly develops, demonstrates, and infuses revolutionary, high-payoff technologies, expanding the boundaries of the aerospace enterprise.rnrnIn the early 21st century, NASA's reach spans the universe. The Mars rover Curiosity is still exploring Mars to see if it might once have had environments suitable for life. Cassini is in orbit around Saturn, as Juno makes its way to Jupiter. The restored Hubble Space Telescope continues to explore the deepest reaches of the cosmos as NASA developes the James Webb Space Telescope.rnrnCloser to home, the latest crew of the International Space Station is extending the permanent human presence in space. With commercial partners such as SpaceX, NASA is helping to foster the development of private-sector aerospace.rnrnEarth science satellites are sending back unprecedented data on Earth's oceans, climate and other features. NASA's aeronautics team is working with other government organizations, universities, and industry to fundamentally improve the air transportation experience and retain our nation's leadership in global aviation.",
		"created": "2013-03-14T03:44:44.467521",
		"title": "National Aeronautics and Space Administration",
		"name": "nasa-gov",
		"revision_timestamp": "2013-08-20T16:04:52.563777",
		"is_organization": true,
		"state": "active",
		"image_url": "http://polargateways2008.gsfc.nasa.gov/images/LOGO_2in/NASA_2.jpg",
		"revision_id": "7f05110b-681a-402c-a372-74500dc583dd",
		"type": "organization",
		"id": "d8a6202b-c0c3-463d-88a0-3bc021a178ed",
		"approval_status": "approved"
	},
	"revision_id": "d33a7f14-6103-4bb8-b450-9355853137cc"
}